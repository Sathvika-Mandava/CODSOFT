# Install required libraries
# Note: This assumes you are running the script in an environment that supports pip installations.
# You might need to install these libraries manually in some cases.
# Run the following commands in your terminal or command prompt:
# pip install opencv-python opencv-python-headless dlib face_recognition

# Import libraries
import cv2
import face_recognition

# Disable GPU for dlib
import os
os.environ['DLIB_USE_CUDA'] = '0'

# Load the pre-trained Haar Cascade face detector
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Load an image with known faces
known_image = face_recognition.load_image_file("path_to_known_image.jpg")
known_face_encoding = face_recognition.face_encodings(known_image)[0]

# Load an image with unknown faces
unknown_image = face_recognition.load_image_file("path_to_unknown_image.jpg")

# Find all face locations in the unknown image using Haar Cascade
gray = cv2.cvtColor(unknown_image, cv2.COLOR_BGR2GRAY)
faces_haar = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

# Encode all faces in the unknown image using dlib
face_locations = face_recognition.face_locations(unknown_image)
unknown_face_encodings = face_recognition.face_encodings(unknown_image, face_locations)

# Compare each face found in the unknown image with the known face
for unknown_face_encoding in unknown_face_encodings:
    results = face_recognition.compare_faces([known_face_encoding], unknown_face_encoding)

    if results[0]:
        print("Face recognized!")
    else:
        print("Face not recognized.")

# Draw rectangles around the faces detected by Haar Cascade
for (x, y, w, h) in faces_haar:
    cv2.rectangle(unknown_image, (x, y), (x+w, y+h), (255, 0, 0), 2)

# Display the result
cv2.imshow('Result', unknown_image)
cv2.waitKey(0)
cv2.destroyAllWindows()
